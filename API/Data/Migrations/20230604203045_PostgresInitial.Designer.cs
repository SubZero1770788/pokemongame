// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230604203045_PostgresInitial")]
    partial class PostgresInitial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("API.Entities.Attack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Accuracy")
                        .HasColumnType("integer");

                    b.Property<string>("AttackName")
                        .HasColumnType("text");

                    b.Property<int>("AttackPower")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("PokemonTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("Split")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("PokemonTypeId");

                    b.ToTable("Attacks");
                });

            modelBuilder.Entity("API.Entities.CurrentEncounter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Attack")
                        .HasColumnType("integer");

                    b.Property<int>("Attack1Id")
                        .HasColumnType("integer");

                    b.Property<int>("Attack2Id")
                        .HasColumnType("integer");

                    b.Property<int>("Attack3Id")
                        .HasColumnType("integer");

                    b.Property<int>("Attack4Id")
                        .HasColumnType("integer");

                    b.Property<int>("Defense")
                        .HasColumnType("integer");

                    b.Property<int>("HP")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<int>("PokemonId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecialAttack")
                        .HasColumnType("integer");

                    b.Property<int>("SpecialDefense")
                        .HasColumnType("integer");

                    b.Property<int>("Speed")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CurrentPokemonEncounter");
                });

            modelBuilder.Entity("API.Entities.HelperEntities.Ineffective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IneffectiveId")
                        .HasColumnType("integer");

                    b.Property<int>("IneffectiveTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("IneffectiveTypesId")
                        .HasColumnType("integer");

                    b.Property<int?>("PokemonTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IneffectiveTypesId");

                    b.HasIndex("PokemonTypeId");

                    b.ToTable("Ineffectives");
                });

            modelBuilder.Entity("API.Entities.HelperEntities.IneffectiveTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("IneffectiveTypes");
                });

            modelBuilder.Entity("API.Entities.HelperEntities.ItemUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemUsers");
                });

            modelBuilder.Entity("API.Entities.HelperEntities.PokemonPokemonType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PokemonId")
                        .HasColumnType("integer");

                    b.Property<int>("PokemonTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PokemonPokemonTypes");
                });

            modelBuilder.Entity("API.Entities.HelperEntities.PokemonUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("PokemonId")
                        .HasColumnType("integer");

                    b.Property<int>("Attack")
                        .HasColumnType("integer");

                    b.Property<int>("Attack1Id")
                        .HasColumnType("integer");

                    b.Property<int>("Attack2Id")
                        .HasColumnType("integer");

                    b.Property<int>("Attack3Id")
                        .HasColumnType("integer");

                    b.Property<int>("Attack4Id")
                        .HasColumnType("integer");

                    b.Property<int>("Defense")
                        .HasColumnType("integer");

                    b.Property<int>("Experience")
                        .HasColumnType("integer");

                    b.Property<int>("HP")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsInTeam")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("SpecialAttack")
                        .HasColumnType("integer");

                    b.Property<int>("SpecialDefense")
                        .HasColumnType("integer");

                    b.Property<int>("Speed")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "PokemonId");

                    b.HasIndex("PokemonId");

                    b.ToTable("PokemonUsers");
                });

            modelBuilder.Entity("API.Entities.HelperEntities.Resistant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("PokemonTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ResistantId")
                        .HasColumnType("integer");

                    b.Property<int>("ResistantTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("ResistantTypesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PokemonTypeId");

                    b.HasIndex("ResistantTypesId");

                    b.ToTable("Resistants");
                });

            modelBuilder.Entity("API.Entities.HelperEntities.ResistantTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ResistantTypes");
                });

            modelBuilder.Entity("API.Entities.HelperEntities.Weak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("PokemonTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("WeakId")
                        .HasColumnType("integer");

                    b.Property<int>("WeakTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("WeakTypesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PokemonTypeId");

                    b.HasIndex("WeakTypesId");

                    b.ToTable("Weaks");
                });

            modelBuilder.Entity("API.Entities.HelperEntities.WeakTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WeakTypes");
                });

            modelBuilder.Entity("API.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("API.Entities.Pokemon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Attack")
                        .HasColumnType("integer");

                    b.Property<int>("Attack1Id")
                        .HasColumnType("integer");

                    b.Property<int>("Attack2Id")
                        .HasColumnType("integer");

                    b.Property<int>("Attack3Id")
                        .HasColumnType("integer");

                    b.Property<int>("Attack4Id")
                        .HasColumnType("integer");

                    b.Property<int>("BattleGroup")
                        .HasColumnType("integer");

                    b.Property<int>("Defense")
                        .HasColumnType("integer");

                    b.Property<int>("Experience")
                        .HasColumnType("integer");

                    b.Property<int>("HP")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<int>("SpecialAttack")
                        .HasColumnType("integer");

                    b.Property<int>("SpecialDefense")
                        .HasColumnType("integer");

                    b.Property<int>("Speed")
                        .HasColumnType("integer");

                    b.Property<int>("WildPlaceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WildPlaceId");

                    b.ToTable("Pokemons");
                });

            modelBuilder.Entity("API.Entities.PokemonAttacks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AttackId")
                        .HasColumnType("integer");

                    b.Property<int>("AttacksId")
                        .HasColumnType("integer");

                    b.Property<int?>("PokemonId")
                        .HasColumnType("integer");

                    b.Property<int>("PokemonsId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AttackId");

                    b.HasIndex("PokemonId");

                    b.ToTable("PokemonAttacks");
                });

            modelBuilder.Entity("API.Entities.PokemonType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PokemonTypes");
                });

            modelBuilder.Entity("API.Entities.UserData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("API.Entities.UserDataUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("API.Entities.UserRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("API.Entities.WildPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WildPlaces");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PokemonPokemonType", b =>
                {
                    b.Property<int>("PokemonTypesId")
                        .HasColumnType("integer");

                    b.Property<int>("PokemonsId")
                        .HasColumnType("integer");

                    b.HasKey("PokemonTypesId", "PokemonsId");

                    b.HasIndex("PokemonsId");

                    b.ToTable("PokemonPokemonType");
                });

            modelBuilder.Entity("API.Entities.Attack", b =>
                {
                    b.HasOne("API.Entities.PokemonType", "PokemonType")
                        .WithMany("Attacks")
                        .HasForeignKey("PokemonTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PokemonType");
                });

            modelBuilder.Entity("API.Entities.HelperEntities.Ineffective", b =>
                {
                    b.HasOne("API.Entities.HelperEntities.IneffectiveTypes", "IneffectiveTypes")
                        .WithMany("Ineffectives")
                        .HasForeignKey("IneffectiveTypesId");

                    b.HasOne("API.Entities.PokemonType", "PokemonType")
                        .WithMany("Ineffective")
                        .HasForeignKey("PokemonTypeId");

                    b.Navigation("IneffectiveTypes");

                    b.Navigation("PokemonType");
                });

            modelBuilder.Entity("API.Entities.HelperEntities.ItemUser", b =>
                {
                    b.HasOne("API.Entities.Item", "Item")
                        .WithMany("ItemUsers")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.UserData", "User")
                        .WithMany("ItemUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.HelperEntities.PokemonUser", b =>
                {
                    b.HasOne("API.Entities.Pokemon", "Pokemon")
                        .WithMany("PokemonUsers")
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.UserData", "User")
                        .WithMany("Pokemons")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pokemon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.HelperEntities.Resistant", b =>
                {
                    b.HasOne("API.Entities.PokemonType", "PokemonType")
                        .WithMany("Resistant")
                        .HasForeignKey("PokemonTypeId");

                    b.HasOne("API.Entities.HelperEntities.ResistantTypes", "ResistantTypes")
                        .WithMany("Resistants")
                        .HasForeignKey("ResistantTypesId");

                    b.Navigation("PokemonType");

                    b.Navigation("ResistantTypes");
                });

            modelBuilder.Entity("API.Entities.HelperEntities.Weak", b =>
                {
                    b.HasOne("API.Entities.PokemonType", "PokemonType")
                        .WithMany("Weaks")
                        .HasForeignKey("PokemonTypeId");

                    b.HasOne("API.Entities.HelperEntities.WeakTypes", "WeakTypes")
                        .WithMany("Weaks")
                        .HasForeignKey("WeakTypesId");

                    b.Navigation("PokemonType");

                    b.Navigation("WeakTypes");
                });

            modelBuilder.Entity("API.Entities.Pokemon", b =>
                {
                    b.HasOne("API.Entities.WildPlace", "WildPlace")
                        .WithMany("Pokemons")
                        .HasForeignKey("WildPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WildPlace");
                });

            modelBuilder.Entity("API.Entities.PokemonAttacks", b =>
                {
                    b.HasOne("API.Entities.Attack", "Attack")
                        .WithMany("PokemonAttacks")
                        .HasForeignKey("AttackId");

                    b.HasOne("API.Entities.Pokemon", "Pokemon")
                        .WithMany("PokemonAttacks")
                        .HasForeignKey("PokemonId");

                    b.Navigation("Attack");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("API.Entities.UserDataUserRole", b =>
                {
                    b.HasOne("API.Entities.UserRoles", "Role")
                        .WithMany("UserRolesCol")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.UserData", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("API.Entities.UserRoles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("API.Entities.UserData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("API.Entities.UserData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("API.Entities.UserData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokemonPokemonType", b =>
                {
                    b.HasOne("API.Entities.PokemonType", null)
                        .WithMany()
                        .HasForeignKey("PokemonTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Pokemon", null)
                        .WithMany()
                        .HasForeignKey("PokemonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Entities.Attack", b =>
                {
                    b.Navigation("PokemonAttacks");
                });

            modelBuilder.Entity("API.Entities.HelperEntities.IneffectiveTypes", b =>
                {
                    b.Navigation("Ineffectives");
                });

            modelBuilder.Entity("API.Entities.HelperEntities.ResistantTypes", b =>
                {
                    b.Navigation("Resistants");
                });

            modelBuilder.Entity("API.Entities.HelperEntities.WeakTypes", b =>
                {
                    b.Navigation("Weaks");
                });

            modelBuilder.Entity("API.Entities.Item", b =>
                {
                    b.Navigation("ItemUsers");
                });

            modelBuilder.Entity("API.Entities.Pokemon", b =>
                {
                    b.Navigation("PokemonAttacks");

                    b.Navigation("PokemonUsers");
                });

            modelBuilder.Entity("API.Entities.PokemonType", b =>
                {
                    b.Navigation("Attacks");

                    b.Navigation("Ineffective");

                    b.Navigation("Resistant");

                    b.Navigation("Weaks");
                });

            modelBuilder.Entity("API.Entities.UserData", b =>
                {
                    b.Navigation("ItemUsers");

                    b.Navigation("Pokemons");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("API.Entities.UserRoles", b =>
                {
                    b.Navigation("UserRolesCol");
                });

            modelBuilder.Entity("API.Entities.WildPlace", b =>
                {
                    b.Navigation("Pokemons");
                });
#pragma warning restore 612, 618
        }
    }
}
